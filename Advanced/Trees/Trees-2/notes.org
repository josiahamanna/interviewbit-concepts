#+title: Notes
* Trees 2
** Treversing tree level by level
1. It may be right to left or left to right, or alternative.
2. [[./level-order-traversal-example.png]]
3. Recursion will not help us here. Becuase we cannot expect a esub problem (say to left) to give us the right result.
4. Let's take a magical box (we don't know the DS yet) and traverse.
   1. Visit three and get the children: [ 3, 7, 4 ].
   2. After visiting 3 (and getting the children), we no more need three. So remove it: [ +3+, 7, 4 ].
   3. Now we visit 7, get the children: [ +3+, 7, 4, 9 ].
   4. After visiting 7, we no longer require it: [ +3+, +7+, 4, 9 ].
   5. Now visit 4, and get the children: [ +3+, +7+, 4, 9, 14, 18 ].
   6. After visiting 4, we no longer require 4: [ +3+, +7+, +4+, 9, 14, 18 ].
   7. And so on. We are inserting at the rear, and removing from front.
   8. Pseudo code.
      #+begin_src C
array<int> levelOrderTraversal (Node root) {
  queue<Node> q;
  q.enqueue(root);
  array<int> result;

  while(!q.empty()) {
    Node front = q.front();

    q.dequeue();

    result.push(front);

    if(front.left != null) q.enqueue(temp.left);
    if(front.right != null) q.enqueue(temp.right);
  }
  return result;
}
      #+end_src
   9. TC: O(N); SC: O(N) {At a time it will hold one level only, max number of nodes at any level }
   10. Slight change in the requirement. We need to print level by level. In the above code we print it without any line break.
       1. First we know only one data will be there. So we can hard code it. Queue = [FirstNode, null]
       2. So when you build the queue, it will look like this. [3, null, 7, 4, null, 9, 14, 18, null]. You can build an array respectively or add line break.
       3. But here while loop cannot run till queue has single element. It will go to infinite loop. You need to terminate the while loop there is only one element. (null will be the last remaining element)
   11. What if we need to right to left level order traversal? Just inter change the en-queue process of left and right.
   12. How to get only left view?
       1. You know how to get two dimensional array, in that you can only choose first element of the inner array.
       2. But what if the interviewer asks you not use extra space?
       3. Then maintain a previous pointer. (Do a dry run)
   13. How to get only right view?
       1. You can reverse the order (right to left), then the problem is same as above.
       2. Another is checking for next. (after dequeue check for next if it is null)
** Vertical level order traversal
1. Vertical level traversal represents the distance from the root.
   1. Consider root is in 0th distance.
   2. Root's left child will be in 0-1 = -1 level
   3. Root's right child will be in 0+1 = +1 level
2. Refer the following figure
   [[./vertical-order-traversal.png]]
3. Generalized
   [[./vertical-order-traversal-generalised.png]]
4. How to you get traverse?
   1. First you need to assign distance from root for all the nodes. Refer the above diagram.
   2. While assigning the distance, maintain a hash map {distance: [vertices]}
   3. For vertices to be on correct order you need to decide the right traversal (preorder, inorder, postorder, level order).
   4. Only level order traversal can put vertices into the hash map to the corresponding distance in right order.
5. Pseudo code.
   #+begin_src C
array<int> verticalOrderTraversal(Node root) {
  map<int, array<int>> hm;
  queue<set<node, int>> q;
  array<int> result;

  int minLevel = MAX_INT;
  int minLevel = MIN_INT;

  q.enqueue(root);

  while(!q.empty()) {
    Node temp = q.dequeue();

    Node curr = temp.first();
    int level = temp.second();

    minLevel = Min(minLevel, level);
    maxLevel = Max(minLevel, level);

    hm[level].insert(curr.val);

    if(curr.left) q.enqueue(curr.left);
    if(curr.right) q.enqueue(curr.right);
  }

  for(let i = minLevel; i <= maxLevel; i++) {
    for(let j = 0; j < hm[i].size(); j++) {
      result.insert(hm[i][j]);
    }
  }

  return result;
}
   #+end_src
6. Now top view and bottom view do it yourself
** Construct the unique tree given any order traversal.
1. Preorder
   1. One thing is sure, given preorder the first element will be the root of the tree we are going to construct.
   2. But no way you can know the left child of it. If they give the null information you can, otherwise you cannot.
   3. Because, the tree might be skewed.
2. Postorder:
   1. You an find the root, i.e., the last element.
   2. But you cannot construct the unique tree if they don't give you null information.
3. Inorder:
   1. You cannot find the root, also cannot construct the unique tree.
   2. If root is given, you can infer that the elements which are left to it will be on left subtree and elements which are right to it will on right subtree.
4. What if two orders are given, i.e., preorder and inorder?
