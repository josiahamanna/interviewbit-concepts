* Stacks 2
** Nearest small element
For every index i, find the nearest element on left which is smaller than arr[i].
For ex:    index:  0 1  2 3  4  5
         element:  4 5  2 10 8  2
nearest smallest: -1 4 -1 2  2 -1
Brute force: For every index i, traverse from i-1 to 0 until you get a smaller element than a[i]
             Complexity will be O(N^2)
Improve: Maintain stack in increasing order.
#+begin_src C
  ans = [];
  for(i = 0; i < n; i++) {
    while(st.empty() && st.top() >= arr[i]) {
      st.pop();
    }
    if(st.empty()) ans[i] = -1;
    else ans[i] = st.top();

    st.push([arr[i]]);
   }
#+end_src
Complexity: every element is entering stack only once. So it is O(N).
If the question is *nearest smaller element on the right* -> Iterate from right.
If the question is *nearest greater element on the left* -> The second condition in while loop changes to st.top() <= arr[i].
If the question is *nearest greater element on the right* -> Iterate from right, and change the second condition in while loop to st.top() <= arr[i].
We can also store the index
#+begin_src C
  for(i = arr.len -1; i > -1; i--) {
    while(!st.empty() && arr[st.top()] >= arr[i]) {
      st.pop();
    }
    if(st.empty()) ans[i] = -1; // Instead of -1 you can store n, because you are storing the index instead of actual values
    else ans[i] = st.top();
    st.push[arr[i]];
  }
#+end_src
All four techniques can be used to solve following problem
** Find the sum of max-min for all sub arrays
1. Build nearest smaller arrays for left and right
2. Build nearest largest arrays for left and right
3. Iterate over the array and do this
   ans += ((i-j)*(k-i) - (i-j')*(k'-j)) * arr[i];
   j: min_left[i]
   k: min_right[i]
   j': max_left[i]
   k': max_right[i]
** Given histogram find the largest rectangle formed by contiguous histogram bars
[[./histogram-example.png][Example]]
area = base*height (Idea is to maximize the height).
1. Go to each bar and fix it.
2. Then calculate nearest smallest on the left, i.e., l.
3. Then calculate nearest largest on the right, i.e., r.
4. Then area will be (l-r-1)*arr[i].
5. Do this is for every index in arr and find the maximum.
** Problem
Evaluating expression:
1. *, / takes precedence on +, -
2. Same precedence operations are evaluated from left to right
3. operand op operand -> is infix expression
4. In order to solve infix expression we need to traverse and find out which is having precedence.
   This takes O(N^2) complexity
5. To solve that we have something called prefix and postfix
6. In order to convert to into postfix and prefix it takes O(N)

   
