#+title: Notes
* Queue and Dequeue 2
** Problem: Find sliding window maximum
1. Given an array find maximum of all the subarrays of size k
2. For example: [10, 1, 2, 9, 7, 6, 5, 11, 3], finding maximum for size k = 3 (Length: 9)
   Subarrays
   1. [10, 1, 2] -> max: 10
   2. [1, 2, 9] -> max: 9
   3. [2, 9, 7] -> max: 9
   4. [9, 7, 6] -> max: 9
   5. [7, 6, 5] -> max: 7
   6. [6, 5, 11] -> max: 11
   7. [5, 11, 3] -> max: 11
3. Brute force: Find for all windows ()
   TC for finding all windows is  O(N)
   TC for finding max in one window again is O(N)
   Total TC will be O(N^2)
4. Let's consider ordered map.
   <Look for yourself>
5. Final solution using D-Queue
   1. What is D-Queue?
      1. D-Queue is a data structure with both features of stack and queue.
      2. You can add elements from front and back, remove elements from front and back.
   2. How to use this here?
      1. Slide across the array with fixed window size
      2. For the element i, check whether A[i] is lesser than dqueue[rear].
         If so add A[i] to rear of dqueue
         If not remove the element from rear of dqueue
      3. Do this till you find an element greater than A[i] (or dqueue is empty), and then push A[i] to the rear of dqueue.
      4. When the window moves we have to remove an element.
         We do it only when front of queue is equal to A[i-B]
      5. Ultimately you have to store the maximum, where is it?
         It is nothing but the element in the front.
      6. Code
         #+begin_src C
dqueue dq;

for(int i = 0; i < k; i++) {
  while(dq.size>0 && dq.rear() < arr[i]) {
    dq.pop_rear();
  }
  dq.push_rear(a[i]);
}

result.insert(dq.front());

for (int i = k; i < arr.size(); i++) {
  while(dq.size>0 && dq.rear() < arr[i]) {
    dq.pop_rear();
  }
  dq.push_rear(a[i]);

  if(dq.front() === A[i-k]) {
    dq.pop_front();
  }

  result.insert(dq.front());
}
         #+end_src
** Given infix, convert it to post fix.
1. In infix expressions we are not able to see the order of the evaluation.
   That is why we did not chose it to solve expressions
2. Solution method: You need to traverse the expresion.
   Four scenarios
   1. A[i] is operand, put it in postfix (answer or result).
   2. A[i] is open bracket '(', push to stack.
   3. A[i] it is a closing bracket, pop stack to postfix till you get openning bracket.
   4. A[i] it is a operator:
      1. precedance(A[i]) <= precedance(stack.top())
         pop it and put it in the postfix
         And keep checking it again and again
      2. precedance(A[i]) > precedance(stack.top())
         Push it.
      3. You may have to handle when stack is empty,
         and stack's top is opening bracket '('.
         In both the cases you just push it.
   5. You need to create a precedence hash yourself
3. The code for this code this problem is in stacks 2 folder.
