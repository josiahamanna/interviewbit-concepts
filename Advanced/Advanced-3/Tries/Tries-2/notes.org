#+title: Notes
* Tries-2
** Given Input strings and queries, for each query check if given query is prefix of any input string.
[[./screenshots/prefix-string-or-not.png]]
1. Idea:
   1. Insert all words in trie. 
   2. For every query, iterate on trie from root and check query is prefix or not.
2. TC: N*L*O(N) + Q*L*O(1)
3. SC: N*L
4. Tires is also called as *Prefix Trees*
   
** Given a binary matrix[N][M], find no of distinct (for every element consider only 1 occurence) rows.
[[./screenshots/unique-binary-row.png]]
1. Brute force:
   1. For every row compare with all the rows below. If the frequency is zeor then increment count. TC: O(N^2*M). SC: O(1). 
   2. Turns out this (bruteforce) is the only approach that has space complexity or order 1.
2. Idea 2
   1. Convert each row into string and insert in hashset. TC: O(N*M) + O(N*M).
   2. Storing a string of length m into a hashset will take O(M) TC.
3. Idea 3
   1. For every row convert it into decimal and insert in hashset
   2. Convertion will take N*M + Insertion into hashmap will take N*O(1)
   3. Problem here is
      1. If the number of bits M is < 31 we can store it in a int
      2. M <= 63 then long
      3. M > 63 or M > 100 or 200 then you can't go with number. You will have to convert it into string. Same as Idea 3.
      4. If they say in problem M <= 63 then you can go with this approach.
4. Idea 4
   1. Insert every row in a trie
   2. Take a class
      #+begin_src C
class Node {
  Node c[2];

  Node () {
    c[0] = NULL;
    c[1] = NULL;
  } 
}
      #+end_src
   3. When inserting a row in the trie, if we are not creating a single new node, it means that the row is already present.
   4. If you are creating a new node while inserting a row, then that row is new to the trie.
5. Pseudo code
   #+begin_src C
int uniqueRow(int mat[][], int N, int M) {
  Node root = new Node();
  int count = 0;

  for(int i = 0; i < N; i++) {
    if(insert(root, mat[i], M) count++;
  }  

  return count;  
}  

bool insert(Node root, int row[], int M) {
  bool flag = false;

  for(let i = 0; i < M; i++) {
    if(root.c[row[i]] == NULL) {
      root.c[row[i]] = new Node();
      flag = true
    }  
    root = root.c[row[i]];
  }  
  return flag;
}  
   #+end_src
6. TC: N*M; SC:N*M (in reality it will be less than N*M, because in this example if you have 7*5 matrix you will end up creating less that 7*5 nodes, because prefixes will repeate)
      
** Given N array elements, find pair with max xor value (i != j)
1. Brute force: Get all pairs and calculate xor. TC: O(N^2); SC: O(1)
2. Use binary trie.
   1. Store the bits in trie. Get the max of array and get max set bit position.
   2. Then for each element in array see whether we can maximize the result. That means, if in a position we have set bit as 1, then we need 0 to maximize the result.
   3. Ex: for 1010 we need 0101 so that xor will become 1111.
3. Pseudo code.
   #+begin_src C
class Node{
  Node c[2];

  Node() {
    c[0] = NULL;
    c[1] = NULL;
  }  
}  

int maxXor(int ar[], int N) {
  int me = maxInAr(ar);
  int b = maxSetBit(me)

  Node root = new Node();

  for(i = 0; i < N; i++) {
    insert(root, ar[i], b);
  }  

  int ans = 0;

  for(int i = 0; i i < N; i++) {
    ans = max(ans, query(root, ar[i], b);
  } 

   return ans;
}  

insert(Node root, int ele, int b) {
  for(i = b;i >=0; i--) {
    int e = checkBit(ele, i);
    if(root.c[e] == NULL) root.c[e] = new Node();
    root = root.c[e];
  }  
}  

int query(node root, int ele, int ele, int b) {
  int ans = 0;

  int ans = 0;

  for(let i = 0; i >=0; i--) {
    int e = checkBit(ele, i);

    if(root.c[1-e] != NULL) {
      ans = ans + (1 << i) // [2^i];
      root = root.c[1-e];
    }  
    root = root.c[e];
  }  
}  
   #+end_src
4. TC: (N*B + N*B) N = array elements, B = max bit position.
