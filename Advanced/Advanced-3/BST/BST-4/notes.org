#+title: Notes
* BST 4
** Circular doubly linked list
[[./screenshots/circular-doubly-linked-list.png]]
1. Head's previous is linking to tail. Tail's next is pointing to head.
2. A single node is also a circular doubly linked list as shown in the picture.
** Problem
1. Given two circular doubly linked list, combine them into 1 circular doubly linked list and return head.
2. Straight forward
   1. Say, you are given a CDLL1 and CDLL2
   2. Make CDLL1's tail's next point to CDLL2 head.
   3. Make CDLL2's head's previous point to CDLL1's tail.
   4. Make CDLL2's tail's next point to CDLL1's head.
   5. Make CDLL1's head's previous point to CDLL2 tail.
3. Pseudo code
   #+begin_src C
CNode combine(CNode n1, CNode n2) {
  if (n1 == NULL && n2 == NULL) return NULL;
  if (n1 == NULL) return n2;
  if (n2 == NULL) return n1;
  // get the tail of both
  CNode t1 = n1.prev;
  CNode t2 = n2.prev;

  // make connections
  t1.next = n1;
  n2.prev = t1;
  t2.next = n1;
  n1.prev = t2;

  return n1;
}
   #+end_src
** Given a BST, convert it into sorted circular doubly linked list.
1. Example
   [[./screenshots/bst-to-circular-doubly-linked-list.png]]
2. Constraint is that you cannot store the BST to an array.
3. Recursion approach. Assumption: Given BST, the function converts it to sorted CDLL and returns it's head.
   1. Call this function on root's left and assign it to lable leftCDLL.
   2. Call this function on root's right and assign it to lable rightCDLL.
   3. Call combine function on leftCDLL and root and assign it to lable combinedLeftCDLLANDRoot;
   4. Call combine function on combinedLeftCDLLANDRoot and rightCDLL.
   5. Base condition will be if root == NULL then return NULL.
4. Pseudo code
   #+begin_src C
Node convert(Node root) {
  if(root == NULL) return NULL;

  Node leftCDLL = convert(root.left);
  Node rightCLL = convert(root.right);

  root.left = root;
  root.right = root;

  return combine((combine(leftCDLL, root), rightCDLL);
}
   #+end_src
5. TC: O(N), SC: O(N). We can do it SC in O(1) using Morris algorithm (Use prev pointer).
** Calculate no of nodes at a distance k from root node.
1. Pseudo code
   #+begin_src C
int distance(Node root, int k) {
  if(root == NULL || k < 0) {
    return 0;
  }
  if(k == 0) return 1;

  int l = distance(root.left, k-1);
  int r = distance(root.right, k-1);

  return l + r;
}
   #+end_src
2. TC: O(N); SC: O(N)
** Calculate no of nodes at a distance k from given source node
1. We can traverse backwards as well (not just children, but parents children). Refer diagram.
   [[./screenshots/nodes-at-distance-k-from-source.png]]
2. You can notice that you can move to parent node as well.
3. So you can apply distance(parent, k-1). But notice you can only go to one part, i.e., left or right. 
   [[./screenshots/nodes-at-distance-k-from-source-1.png]]
   1. For example in S's parent D(in above diagram) you can only consider right child.
   2. Becuase left child is already traversed.
4. For knowing the parent node you can store the path of s and store it somewhere.
5. So the list will look like
   #+begin_src C
list<Node> Path; // [S, D, C, B, A]

k = k - 1;

for(i = 1; i < Path.size(); i++) {
  if(Path.left == Path[i-1]) {
    count += distance(Path[i].right, k - 1);
  } else {
    count += distance(Path[i].left, k - 1);
  }
  k--;
}
   #+end_src
6. TC: O(N) {for getting the path} + O(N) {for getting the nodes} => O(N)
7. SC: O(H) {for storing the path} + O(N) {for recursion stack}
** Given a BT, find the length of the max path going passing through root node.
1. Calculate the left sub tree height and right sub tree height 
2. Height(LST) + Height(RST) + 2 is the max path.
** Given a BT, find the length of max path in the entire tree
1. Apply the above technique across all the nodes.
2. If you do this to all the nodes the complexity will become N^2
3. You can do this while calculating the height 
4. Pseudo code
   #+begin_src C
int hegith(Node root) {
  if(root = NULL) return -1;

  int l = height(root.left);
  int r = height(root.right);

  path = l + r + 2;

  ans = max(ans, path)

  return max(l, r) + 1;       
}
   #+end_src
5. TC: O(N); SC: O(N);
