#+title: Notes
* BST 2
** Delete all nodes outside the given range [l, h]
1. Example
   [[./screenshots/delete-nodes-outside-range.png]]
2. We can solve this by calling the delete node function (we discussed this in last class). The TC will be N^2. Can we do better?
3. We can create a fresh tree but, that is not advised.
4. If you have a root node, it's data can have three possible values.
   [[./screenshots/possilbe-values-of-root.png]]
   1. If we have root's value less than l, then we have to delete root node and all the nodes left to it.
   2. If we have root's value greater than h, then we have to delete root node and all the nodes right to it.
   3. If the root's value lies inside the range, then root stays and root's left and right will be updated (by applying 1, 2 and 3 to both of them).
5. Pseudo code.
   #+begin_src C
TreeNode trimBST(TreeNode root, int l, int h) {
  if(root == NULL) return NULL;

  if(root < l) {
    return trimBST(root.right, l, h);
  }
  if(root > h) {
    return trimBST(root.left, l, h);
  }
  if(root <= h && root >= l) {
    root.left = trimBST(root.left, l, h);
    root.right = trimBST(root.right, l, h);
    return root;
  }
}
   #+end_src
6. TC: O(N), SC: O(N)
** Given a BST where two nodes are swapped, fix the BST.
1. You can just swap the values, that is enough.
2. Example
   [[./screenshots/swap-nodes-example.png]]
3. First traverse the nodes using inorder traversal. (Nodes! not just the values).
4. Iterate over the array and find the two nodes which are not in order, and swap it.
5. Example 1:
   [[./screenshots/recover-bst-1.png]]7 10 5 7 1 17 15 20 -1 -1 -1 -1 -1 -1 -1 -1
   1. Inorder: 1 5 17 10 15 7 20. Initialize: firstEncounter = true
      1. i = 0, prev = null, curr = 1,
         - prev = 1
      2. i = 1, prev = 1, curr = 5
         - prev < curr
         - prev = 5
      3. i = 2, prev = 5, curr = 17
         - prev < curr
         - prev = 17
      4. i = 4, prev = 17, curr = 10
         - prev > curr
         - nodeOne = prev
         - nodeTwo = curr
         - prev = 10
         - firstEncounter = false
      5. i = 5, prev = 10, curr = 15
         - prev < curr
         - prev = 15
      6. i = 6, prev = 15, curr = 7
         - prev > curr
         - nodeTwo = curr
         - Break
   2. Swap values of nodeOne and nodeTwo
6. Example 2:
   [[./screenshots/recover-bst-2.png]]7 10 7 17 1 5 15 20 -1 -1 -1 -1 -1 -1 -1 -1
   1. Inorder: 1 7 5 10 15 17 20. Initialize firstEncounter = true.
      1. i = 0, prev = null, curr 1
         - prev = 1
      2. i = 1, prev = 1, curr 7
         - prev < curr
         - prev = 7
      3. i = 2, prev = 7, curr 5
         - prev > curr
         - nodeOne = 7
         - nodeTwo = 5
         - firstEncounter = false
         - prev = 5
      4. i = 3, prev = 5, curr = 10
         - prev < curr
         - prev = 10
      5. i = 4, prev = 10, curr = 15
         - prev < curr
         - prev = 15
      6. i = 5, prev = 15, curr = 17
         - prev < curr
         - prev = 17
      7. i = 6, prev = 17, curr = 20
         - prev < curr
         - prev = 20
   2. Swap values of nodeOne and nodeTwo
7. We can solve this by not using extra space. Below is the pseudo code.
   #+begin_src C
TreeNode prev = NULL;
TreeNode nodeOne = NULL;
TreeNode nodeTwo = NULL;

void recoverBST(TreeNode root) {
  if(root == NULL) return;

  recoverBST(root.left);

  if(prev != NULL) {
    if(prev.val > root.val) {
      if(nodeOne == NULL) {
        nodeOne = prev;
        nodeTwo = root;
      } else {
        nodeTwo = root;
      }
    }
  }

  prev = root;
  recoverBST(root.right);
}

int temp = nodeOne.val;
nodeOne.val = nodeTwo.val;
nodeTwo.val = temp;

return root;
   #+end_src
