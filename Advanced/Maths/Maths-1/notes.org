* Modular arithmetic.
1. Division is nothing but continuous subtraction.
2. dividend = divisor * quotient + reminder
   divisor * quotient => largest multiple of quotient <= dividend
3. Reminder = dividend - largest multiple of quotient <=dividend
** Concept
1. (a+b)%m = (a%m + b%m)%m
2. (a*b)%m = (a%m * b%m)%m
3. (a-b)%m = (a%m - b%m)%m
   If (a%m - b%m) is negative then do (a%m - b%m + m); Only when doing subtraction
4. (a%m)%m = a%m
*** Question 1
1. Given A and B, (A > B) Find M such that A%M = B%M, M>1
2. A%M - B%M = 0
   Take modulo on both sides
   (A%M - B%M)%M = 0
   (A-B)%M = 0; This infers M divides (A-B)
   So any factor of A-B is our answer
*** Question 2
1. Given N array elements, calculate number of pairs (i, j) such that (arr[i] + arr[j]) is divisible by M; i!=j && (i, j) = (j, i);
   arr = [4, 7, 6, 5, 5, 3] M = 3
   (0, 3), (0, 4), (2, 5), (1, 3), (1, 4) => So total 5.
2. Brute force: consider all pairs
   i = 0 -> n
     j = i+1 -> n
   TC: O(N^2)
3. Logic:
   1. (arr[i] + arr[j])%m = 0
      (arr[i]%m + arr[j]%m)%m = 0; We are focusing on modulo rather than element.
   2. Take modulo of all the elements in array.
   3. Consider the pairs of elements that has reminder  sum = 0 or sum = M
   4. 0 => 0+0
      M => 1 and M-1
           2 and M-2
   5. Store the frequency in hashmap
   6. Pseudo
      frequency:
      for(i = 0 -> n) {
        frequency[a[i]%m]++;
      };
      Now pairing of the reminder
      ans = 0
      ans += frequency[0]*frequency[0]-1 / 2
      i = 1
      while (i < m-1/2) {
        ans += frequency[i]*frequency[m-i]
        i++
      }
      if(M%2 === 0) {
        ans += frequency[m/2]*frequency[m/2]-1 / 2
      }
*** Question 2
1. Given an array of all distinct integer where {0 <= arr[i] <= n-1}, n is size of array. Rearrange the array such that arr[i] = arr[arr[i]];
2. We can't swap, we will loose data.
3. We can declare a fresh array and keep pushing the element. 
4. Now the solution
   1. 21:00 => 24 hour format gives two information. Quotient and reminder.
   2. Old_value = quotient
   3. new_value = reminder
   4. n = divisor
5. Multiply all the elements with n
   To extract the old value divide by 5
   Start adding extra value
   1. extract the value
   2. Go to that index and extract the old value
   3. Add it to the current index.
   4. Finally take mode of n of all elements
6. pseudo Code
** Concept (Cont...)
1. Take large datatype as you can
2. Distribute your modulo where ever you can
3. a^b takes b iterations
   break it
   1. If b is even a^(b/2) * a^(b/2)
   2. If b is odd a^(b/2) * a^(b/2) * a
4. (a/b)%m => (a*b^-1)%m => ((a%m) * (b^-1%m))%m
   Congruence: x and y are congruent to each other wrt third number n when x%n = y%n
