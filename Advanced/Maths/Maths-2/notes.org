* GCD
** Properties
1. gcd(a, b) = gcd(b, a)
2. gcd(1, a) = 1
3. gcd(prime, x) = 1 if x is less than prime, or x is also prime.
                   prime, if x is multiple of prime
4. gcd(0, x) = x
5. gcd(0, 0) = undefined
6. gcd(a, b) = gcd(a, b-a) :: b>a
   if(a>b) swap(a, b);
   while(a>0) {
     b -= a;
     if(b>a) swap(a, b);
   }
   gcd = b;
7. gcd(a, b) = gcd(a, b%a);
   if(a>b) swap(a, b)
   while(a>0) {
     temp = a;
     a = b%a;
     b = temp;
   }
   return b;
8. 
** Problem 1
1. Given an array, check if there exist any subset of the array such that GCD of all numbers in the subset is 1.
2. Example
   1. [2, 30, 70 ,15, 8, 30]; (2, 15), (15, 8)
   2. [5, 30, 10, 60, 15]; (5, 10, 15)
3. Say suppose we get x as gcd, and new element is added into array. x will not increase, it will always decrease.
4. That's all.
5. If x = 1 then we can say there is a subset whose gcd is one.
** Problem 2
1. Given an integer array. Delete exactly one element such that gcd of remaining elements is maximum
2. [9, 18, 49, 12, 30]; delete 49
3. Brute force: Try to delete one by one, and try to find gcd remaining one.
4. Build two array, prefix gcd and suffix gcd.
5. ans = max(ans, gcd(prefixGcd(i-1), suffixGcd(i+1)));
** Problem 3
1. There are N players in PUBG. Each player has initial health A[i]. If Player i attacks player j two things might happen.
   if(A[j] <= A[i]) player j dies i.e., A[j] becomes 0.
   if(A[j] > A[i]) A[j] -= A[i]
   Find minimum health that the last surviving person can have.
2. Example:
   1. [6, 4];
      1. first case 0 attacks 1
         [6, 0] 1 dead. survivor power is 6.
      2. second case 1 attacks 0
         [2, 4]
         1. first case 0 attacks 1
            [2, 2]
            Both the cases any one of them will die, survivor power is 2.
         2. second case 1 attacks 0
            [0, 4] 0 dead. survivor power is 4.
      
