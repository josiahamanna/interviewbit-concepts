* Hashing 2
** Problem 1
1. Given coordinates of N points on a 2D-plane. Count number of right-angle triangles using the given set of points such that two small sides of triangle should be parallel to x-axis and y-axis.
2. (1, 3), (5, 1), (5, 3), (3, 3), (1, 1)
3. Brute force: Consider all possible triplets and check if a triplet matches our condition.
4. How will you check though?
   1. x1 == x2 && y1 == y3
   2. You don't even have to focus on right angle here. Above condition is enough.
5. Pseudo code
   #+begin_src c
     for(int i = 0; i < n; i++) {
       for(int j = 0; j < n; j++) {
         if(i==j) continue;
         for(int k = 0; k < n; k++) {
           if(i ==k || j == k) continue;
           if(x[i] == x[j] && y[i] == y[k]) {
             count++;
           }
         }
       }
      }
   #+end_src
6. If you have two points of the triangle, can you find out the 3rd point?
7. If you have b(x2, y2) and c(x1, y1) which are not middle points then we can find two points that can make right angle triangle, i.e., (x2, y1) and (x1, y2).
8. Pseudo code
   #+begin_src c
     for(i = 0; i < n; i++) {
       for(j = i+1; j < n; j++) {
         // handle parallel hypotenuse
         if(x[i] == y[j] || y[i] == y[j]) continue;
         if(check(x[i], y[j])) count++;
         if(check(x[j], y[i])) count++;
       }
      }
   #+end_src
9. For check function build the pair or string(x_y). Then check if it there or not.
10. But there is a problem
    What if you have hypotenuse is parallel?
11. So you add that condition.
12. The above solution takes O(n2).
13. So consider just the mid point and find the other two. This will reduce the solution to O(n).
14. Use Hash Map not hast set.
** Problem 2
1. Given N points in a 2D-plane, find count of rectangles with parallel sides. (Like above).
2. Brute force: Consider all quadruples and check the condition.
   x1 == x4 && x2 == x2 && y1 == y2 && y3 == y4
3. Check for the diagonal and search for the other two points
4. Write the code yourself.
   Diagonal cannot be parallel
5. Can it be done by O(n)?
6. Do it yourself.
** Problem 3
1. Given a string s & an integer k, find if s can be rearranged to form a string which is concatenation of k equal strings.
2. Form k buckets where you can equally distribute.
3. Count of every character % k === 0
** Problem 4
1. Pattern matching
   S = a b c b a b x a
   T = c b a
   Check whether T is a substring of S.
2. We are going to convert a hash map to a integer.
3. Sigma of s[i]*p^i is the hash function we use.
4. Rabin karp string matching algorithm.
