* Sorting 2
** Merge Sort
1. We are given an array with N elements.
2. Consider the teacher wants the assignment sheets according to roll number.
   1. She delegates this work to a student.
   2. This student is smart and divides the set of assignments exactly to half and gives one half to one of his friends and other half to a another friend and tell them 'I need these assignment sheets to be sorted according to roll number'.
   3. But these friends of his is also witty as him. They also do the same.
   4. Here what happens to the guy who gets two sheets will he sort it by himself? No this guy is so lazy and gives one sheet to one of pals and another to another pal.
   5. Now the guy who got one in the end will return the sheet saying it already sorted and gives back.
   6. Now while collecting he will have to merge two parts, and return.
3. Pseudo code 
   mergeSort(A, l, r) {
     if(l === r) {
       return
     }
     mid = l + (r-l)/2
     mergeSort(A, l, mid)
     mergeSort(A, mid+1, r);
     merge(A, l, mid+1, r);
   }
   merge(A, l, mid, r) {
     p1=l,p2=mid,p3=0, temp=[];
     while(p1 < mid && p2 <= r) {
       if(A[p1] < A[p2]) {
         temp[p3++] = A[p1++]
       } else {
         temp[p3++] = A[p2++]
       }
     }
     while(p1 < mid) {temp[p3++] = A[p1++]}
     while(p2 < r) {temp[p3++] = A[p2++]}
     for(let i = 0, j = l; j <= r; i++,j++) {
       A[i] = temp[j];
     }
   }
** Problem 1
1. You are given an array with N integer, find total pair of i and j where i < j and A[i] > A[j]. This pair is called inversion pair.
2. Brute force. Go to every single pair and find out.
3. Other method is to make use of merge sort technique.
4. Say we have divided the array to two parts.
   10, 2, 8, 15, 6 and 12, 2, 18, 7, 1
   First part has 7 inversion pairs. Second part has 7 inversion pairs.
5. Now we need the inversion pairs after we merge it.
   We can do that if we sort both the array
   2, 6, 8, 10, 15 and 1, 2, 7, 12, 18
6. Now consider we have p1 and p2 pointer in the beginning of these two arrays.
7. arr[p1] > arr[p2]. As it is sorted all the rest of the elements in part 1 will be greater then arr[p2]. So we can increment our count with m-p1.
8. Then you need to return count. Now we will have three counts. One is from first part, second is from the second part. Third is from after merging both of them. 
9. Pseudo code
   mergeSort(A, l, r) {
     if(l === r) {
       return 0;
     }
     mid = l + (r-l)/2
     x = mergeSort(A, l, mid)
     y = mergeSort(A, mid+1, r);
     z = merge(A, l, mid+1, r);
     return x+y+z;
   }
   merge(A, l, mid, r) {
     p1=l,p2=mid,p3=0, temp=[], count=0;
     while(p1 < mid && p2 <= r) {
       if(A[p1] <= A[p2]) {
         count += m-p1;
         temp[p3++] = A[p1++]
       } else {
         temp[p3++] = A[p2++]
       }
     }
     while(p1 < mid) {temp[p3++] = A[p1++]}
     while(p2 < r) {temp[p3++] = A[p2++]}
     for(let i = 0, j = l; j <= r; i++,j++) {
       A[i] = temp[j];
     }
     return count
   }
** Comparator function in sort.
- Check the documentation.
- It is language specific.
- In JavaScript if you want to sort the array in ascending order.
- Array.sort((a, b) => {
    if(a < b) {
      // swap
      return -1
    } else if (a > b) {
      // don't swap
      return 1
    }
    // don't do anything
    return 0
  })
- Note: here a is the second element, b is the first element.
