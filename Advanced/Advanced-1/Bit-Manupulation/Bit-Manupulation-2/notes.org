* Bit manipulation 2
** Problem 1
1. Divide the class into numbers of power of 2.
2. If a number is a power of 2 then only one bit will be set.
3. If we unset the set bit then the number will become 0.
4. How to unset the last set bit from right?
5. Last set bit is the bit where to left any set bit and right to it no set bit.
6. How to achieve this in single iteration?
7. do x & (x-1)
8. Apply to original question, can get whether an element is power of two or not.
** Problem 2
1. You are given all numbers are present from one to n+1 except one number.
2. So in question there will N numbers.
3. n+1 * n + 2 / 2 will give sum of N+1 numbers.
4. You can use this and get the missing number.
5. How can you do using bit manipulation?
6. XOR of all the elements. (Given array and 1-N+1 elements)
7. ans = 0;
   for( i  = 0; i < n; i++) {
     ans ^ arr[i];
   }
   for(i = 1; i <= N+1; i++) {
     ans ^ = i;
   }
8. Advantage of this method is XOR never overflows.
** Problem 3
1. Every number repeats twice except for two numbers. Find the two unique numbers.
2. 3, 4, 5, 4, 7, 5; 3 and 7 is not repeating.
3. We cant use the previous method, cant differentiate those two numbers.
4. Solution:
   1. Get the XOR of all the numbers.
   2. Then find a bit which is one and record which position that bit is set.
   3. Then differentiate numbers according to that bit into two buckets.
   4. Take one bucket and solve it like we did it previously.
5. Pseudo code
   Step 1: xor of all elements
   Step 2: for(i = 0; i < 32; i++) {
             (if(xor & (i << i))) {
               pos = i;
               break;
             }
           }
           for(i = 0; i < n; i++) {
             if(arr[i] & (1 << pos)) {
               xor2 ^ = arr[i];
             } else {
               xor1 ^= arr[i];
             }
           }
           return [xor1, xor2];
** Problem 4
1. All numbers are present from 1-N+2 except for 2 numbers. Find those two numbers.
2. Use the same technique.
3. This time all the elements are not given in the array. So extend the loop to consider the duplicate numbers.
4. And finally we got the answer.
