* Binary Searching 1
1. Why sorting is important?
   To make search easy.
2. What is the important thing in searching?
   What to search, target.
   Where is to search, search space.
3. If the search space is organized, it easy to search.
   On each iteration we can reduce our search space.
4. Breaking the search into two equal parts has more advantage. We can eliminate max part in each iteration.
** Problem 1
1. Given a sorted array, find index of k (if k doesn't exist return -1);
2. Brute force way: Linear search. O(N).
3. Pseudo code
   #+begin_src c
     int binarySearch(int arr[], int n, int target) {
       // define your search space.
       int l = 0, r = n-1;
       while(l <= r) {
         int mid = (l+r)/2;
         if(arr[mid] == target) {
           return mid;
         } else if(arr[mid] < target) {
           r = mid+1
         } else {
           l = mid-1
         }
       }
       return -1;
     }
   #+end_src
   
4. TC: logN; SC: constant.
** Problem 2
1. Given a sorted array, find floor of given element k. (Floor is greatest element <=k)
2. Brute force: Linear search. Do search till you can't get answer. Then return the previous answer.
3. Pseudo code
   #+begin_src c
     // write the code yourself
     int l = 0,
         r = A.length - 1,
         result = Number.MIN_SAFE_INTEGER;

     while (l <= r) {
         let mid = Math.floor((l + r) / 2);
         if (A[mid] === B) {
           result = A[mid];
           break;
         } else if (A[mid] > B) {
           r = mid - 1;
         } else if (A[mid] < B) {
           result = A[mid];
           l = mid + 1;
         }
       }
     return result;
   #+end_src
4. TODO: Do it for ceil
   #+begin_src c
     int l = 0,
         r = A.length - 1,
         result = Number.MAX_SAFE_INTEGER;

     while (l <= r) {
         int mid = Math.floor((l + r) / 2);
         if (A[mid] === B) {
           result = A[mid];
           break;
         } else if (A[mid] > B) {
           result = A[mid];
           r = mid - 1;
         } else if (A[mid] < B) {
           l = mid + 1;
         }
     }
     return result;
   #+end_src
** Problem 3
1. Given a sorted array of N elements. find the frequency of element k.
2. Brute force: Go and find out how many k are present.
3. Another approach: Use binary search for finding out the k.
   Then keep on going to right and left and get the frequency.
4. Last approach:
   freq = last occurrence index - first occurrence index + 1
5. We don't need to just search the element, we also need to find the first occurrence of the element.
6. TODO: Write code
   #+begin_src c
       int l = 0,
         r = A.length - 1,
         firstIndex = -1,
         lastIndex = -1;

       while (l <= r) {
         int mid = Math.floor((l + r) / 2);

         if (A[mid] === B) {
           firstIndex = mid;
           r = mid - 1;
         } else if (A[mid] > B) {
           r = mid - 1;
         } else if (A[mid] < B) {
           l = mid + 1;
         }
       }

       l = 0;
       r = A.length - 1;

       while (l <= r) {
         int mid = Math.floor((l + r) / 2);

         if (A[mid] === B) {
           lastIndex = mid;
           l = mid + 1;
         } else if (A[mid] > B) {
           r = mid - 1;
         } else if (A[mid] < B) {
           l = mid + 1;
         }
       }

       if (firstIndex === -1) {
         return -1;
       } else {
         return lastIndex - firstIndex + 1;
       }
   #+end_src
** Problem 4
1. Given an unsorted array of N distinct elements, find any one of the local minima.
2. Any no of local minima can be present
   Local minima always exist
3. For any element to be called as local minima, there has to be two neighbors whose values are greater.
   Boundary element has one neighbor, and it also can be local minima.
4. Brute Force approach will be to find the minimum element using linear search.
5. We apply searching: Can we apply binary search. 
   1. Case 1: arr[i-1] > a[i] < arr[i+1] (this is solved)
   2. Case 2: arr[i-1] > a[i] > arr[i+1]
      - We can reject left hand side and assume we have the answer in right hand side.
   3. Case 3: arr[i-1] < a[i] < arr[i+1]
      - We can reject RHS and assume the answer is in LHS
   4. Case 4: arr[i-1] < a[i] > arr[i+1]
      - Choose any side
6. Code
   #+begin_src javascript
       if (A.length === 1) return 0;
       if (A[0] < A[1]) return 0;
       if (A[A.length - 1] < A[A.length - 2]) return A.length - 1;
       let l = 1,
         r = A.length - 2,
         result = -1;

       while (l <= r) {
         let mid = Math.floor((r + l) / 2);
         if (A[mid - 1] > A[mid] && A[mid + 1] > A[mid]) {
           result = mid;
           break;
         } else if (A[mid - 1] > A[mid]) {
           l = mid + 1;
         } else {
           r = mid - 1;
         }
       }

       return result;
   #+end_src
** Problem 5
1. Every element occurs twice except for one. Find unique element.
   Note: Duplicates are adjacent to each other.
2. Brute force: Go for XOR

