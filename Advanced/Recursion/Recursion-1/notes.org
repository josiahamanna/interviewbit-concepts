* Recursion 1
1. Function calling itself.
2. Solving a problem using smaller instance of same problem.
3. Smaller instance of same problem can also be called as sub problems.
4. Ex: Sum of N natural numbers
   1. Get sum of N-1 + N
   2. Get sum of N-2 + N-1 + N . . .
      int sum(N) {
        if(N == 0) {
          return 0;
        }
        return sum(N-1) + N
      }
5. To solve recursive problems you have to do three things
   1. Assumption
      Decide what your function does
   2. Main logic
      Solving assumption using sub problems
   3. Base condition
      When do you want to stop your recursive function
6. Consider the above problem
   1. Assumption: Calculate and return sum of N natural numbers
   2. Main logic: Solving assumption with sub problems. Call the same function with smaller instance of same problem i.e., sum(N-1). And for that result we have to add N.
   3. Base condition: Stop it when N reaches 0; Simply return 0.
7. Find Nth factorial
   1. Assumption: Calculate product of first N numbers and return.
   2. Main logic: Calculate product for N-1 numbers i.e., fact(N-1) and multiply N
   3. Base condition: Stop it when N = 1; Simply return 1.
8. Find Fibonacci of Nth number.
   It start with 0th number
   0, 1, 2, 3, 4, 5, 6, 7
   0, 1, 1, 2, 3, 5, 8, 13
   1. Assumption: Calculate nth Fibonacci number and return
   2. Main logic: Calculate N-1th and N-2nd Fibonacci number and add them
   3. Base condition: Stop when N==0 and N==1; N==0 return 0 or N==1 return 1
** Problem 1
1. Power function
2. First method
   1. Assumption: Calculate and return a^n
   2. Main logic: Calculate and return (a^n-1)*a
   3. Base condition: If n == 0; return 1
   4. Pseudo
      pow(a, n) {
        if(n == 0) {
          return 0;
        }
        return a*pow(a, n-1);
      }
3. Second method
   1. Assumption: Calculate and return a^n
   2. Main logic: If n is odd return a^n/2 * a^n/2 * a else return a^n/2*a^a/2
   3. Base condition: Stop when n == 0; return 1.
   4. Pseudo
      if n == 0 return 1
      if(n is even) pow(a, n/2) * pow(a, n/2)
      else a*pow(a, n/2)*pow(a, n/2)
   5. Here something is redundant; Calculating pow(a, n/2).
      if n == 0 return 1
      product = pow(pow(a, n/2), 2)
      if(n is even) return power
      else return a*power
** Problem 2
1. Find GCD
   1. Assumption: Calculate and return GCD of a, b
   2. Main logic: If a<b then Calculate and return GCD of a, b%a else calculate and return GCD of a%b, b
   3. Base condition: Stop when a == 0 return b; when b == 0 return
2. There is a issue when b is lesser than a. We will not be able to stop the recursion.
** TC
1. We have write something called as recursive relation for calculating the complexity of recursion
2. We assume that it will take T(N) time to calculate the recursive function.
3. The base condition and final return statements take O(1).
4. Take the example of calculating N natural numbers.
   1. T(N) = 1 + T(N-1); 1 is nothing but base condition and return statement
   2. We know for N = 0; then we know T(0) is 1.
   3. T(N) = T(N-2) + 1 + 1 => T(N-2) + 2
      T(N) = T(N-3) + 3
      T(N) = T(N-4) + 4
      and so on
      T(N) = T(N-k) + k
      When k = N
      T(N) = T(0) + N
      T(N) = 1 + N => O(N)
5. Factorial
   1. T(N) = 1 + T(N-1)
      T(N) = T(N-2) + 2
      T(N) = T(N-3) + 3
      and so on
      T(N) = T(N-k) + k
      when k = N
      T(N) = T(0) + N
      T(N) = 1 + N => O(N);
6. Fibonacci
   1. T(N) = T(N-1) + T(N-2) + 1
      T(N) = T(N-2) + 2T(N-3) + T(N-4) + 3
      T(N) = T(N-3) + 3*T(N-4) + 3*T(N-5) + T(N-6) + 11
7. Power function
   1. T(N) = T(N/2) + 1
      T(N) = T(N/4) + 2
      T(N) = T(N/8) + 3
      T(N) = T(N/16) + 4
      and so on
      T(N) = T(N/2^k) + k
      2 ^ k = N => log(N) = k
      T(N) = T(N/2^logN) + logN
      T(N) = T(1) + logN => 1 + logN
      This was for the last solution we discussed. We consider the last but one approach.
   2. T(N) = 2*T(N/2) + 1
      T(N) = 2*(2*T(N/4) + 1) + 1 => 4*T(N/4) + 2 + 1
      T(N) = 4*(2*T(N/8) + 1) + 2 + 1 => 8(T(N/8)) + 8 + 2 + 1
      and so on 2^k*(T(N/2^k)) + 2^k-1; k = logN
      N*1 + N + 1 = 2N - 1
** TODO
T(N) = 2 * T(N/2) + O(N) ; T(1) = 1; 
T(N) = 2 * T(n-1) + O(1) ; T(1) = ;1
